// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SolarApp.DatabaseCreation.DbContexts;

namespace SolarApp.DatabaseCreation.Migrations
{
    [DbContext(typeof(SolarDbContext))]
    [Migration("20200212163429_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("SolarApp.Entities.Competition", b =>
            {
                b.Property<int>("CompetitionId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<DateTime>("CompetitionDate")
                    .HasColumnType("timestamp without time zone");

                b.Property<string>("CompetitionDescription")
                    .HasColumnType("text");

                b.Property<string>("CompetitionTitle")
                    .IsRequired()
                    .HasColumnType("character varying(100)")
                    .HasMaxLength(100);

                b.Property<string>("CompetitionUrlAddress")
                    .HasColumnType("text");

                b.HasKey("CompetitionId");

                b.ToTable("Competitions");

                b.HasData(
                    new
                    {
                        CompetitionId = 1,
                        CompetitionDate = new DateTime(2010, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                        CompetitionDescription = "this is a competition description",
                        CompetitionTitle = "TestTitle",
                        CompetitionUrlAddress = "https://box.example.org/"
                    },
                    new
                    {
                        CompetitionId = 2,
                        CompetitionDate = new DateTime(2012, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                        CompetitionDescription = "this is a competition description2",
                        CompetitionTitle = "TestTitle2",
                        CompetitionUrlAddress = "https://box.example2.org/"
                    });
            });

            modelBuilder.Entity("SolarApp.Entities.Result", b =>
            {
                b.Property<int>("ResultId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<int>("CompetitionId")
                    .HasColumnType("integer");

                b.Property<int>("ResultPosition")
                    .HasColumnType("integer");

                b.Property<int>("TeamId")
                    .HasColumnType("integer");

                b.HasKey("ResultId");

                b.HasIndex("CompetitionId");

                b.HasIndex("TeamId");

                b.ToTable("Results");

                b.HasData(
                    new
                    {
                        ResultId = 1,
                        CompetitionId = 1,
                        ResultPosition = 1,
                        TeamId = 1
                    },
                    new
                    {
                        ResultId = 2,
                        CompetitionId = 2,
                        ResultPosition = 3,
                        TeamId = 1
                    });
            });

            modelBuilder.Entity("SolarApp.Entities.Role", b =>
            {
                b.Property<int>("RoleId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<string>("RoleTitle")
                    .IsRequired()
                    .HasColumnType("character varying(100)")
                    .HasMaxLength(100);

                b.HasKey("RoleId");

                b.ToTable("Roles");

                b.HasData(
                    new
                    {
                        RoleId = 1,
                        RoleTitle = "root"
                    },
                    new
                    {
                        RoleId = 2,
                        RoleTitle = "kompozyt"
                    },
                    new
                    {
                        RoleId = 3,
                        RoleTitle = "elektryk"
                    },
                    new
                    {
                        RoleId = 4,
                        RoleTitle = "marketing"
                    },
                    new
                    {
                        RoleId = 5,
                        RoleTitle = "konstrukcja"
                    });
            });

            modelBuilder.Entity("SolarApp.Entities.Session", b =>
            {
                b.Property<int>("SessionId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<DateTime>("Date")
                    .HasColumnType("timestamp without time zone");

                b.Property<int>("UserId")
                    .HasColumnType("integer");

                b.HasKey("SessionId");

                b.HasIndex("UserId")
                    .IsUnique();

                b.ToTable("Sessions");

                b.HasData(
                    new
                    {
                        SessionId = 1,
                        Date = new DateTime(2020, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                        UserId = 1
                    });
            });

            modelBuilder.Entity("SolarApp.Entities.Team", b =>
            {
                b.Property<int>("TeamId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<string>("TeamDescription")
                    .HasColumnType("text");

                b.Property<string>("TeamName")
                    .IsRequired()
                    .HasColumnType("character varying(100)")
                    .HasMaxLength(100);

                b.HasKey("TeamId");

                b.ToTable("Teams");

                b.HasData(
                    new
                    {
                        TeamId = 1,
                        TeamDescription = "a description",
                        TeamName = "First team"
                    });
            });

            modelBuilder.Entity("SolarApp.Entities.User", b =>
            {
                b.Property<int>("UserId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<string>("UserEmail")
                    .HasColumnType("text");

                b.Property<string>("UserFullName")
                    .IsRequired()
                    .HasColumnType("character varying(100)")
                    .HasMaxLength(100);

                b.Property<string>("UserPassword")
                    .HasColumnType("text");

                b.HasKey("UserId");

                b.ToTable("Users");

                b.HasData(
                    new
                    {
                        UserId = 1,
                        UserEmail = "simple@mail.com",
                        UserFullName = "Jan Kowalski",
                        UserPassword = "password"
                    });
            });

            modelBuilder.Entity("SolarApp.Entities.UserRole", b =>
            {
                b.Property<int>("UId")
                    .HasColumnType("integer");

                b.Property<int>("RId")
                    .HasColumnType("integer");

                b.HasKey("UId", "RId");

                b.HasIndex("RId");

                b.ToTable("UserRoles");
            });

            modelBuilder.Entity("SolarApp.Entities.Result", b =>
            {
                b.HasOne("SolarApp.Entities.Competition", "Competition")
                    .WithMany("CompetitionResults")
                    .HasForeignKey("CompetitionId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("SolarApp.Entities.Team", "Team")
                    .WithMany("TeamResults")
                    .HasForeignKey("TeamId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("SolarApp.Entities.Session", b =>
            {
                b.HasOne("SolarApp.Entities.User", "User")
                    .WithOne("Session")
                    .HasForeignKey("SolarApp.Entities.Session", "UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("SolarApp.Entities.UserRole", b =>
            {
                b.HasOne("SolarApp.Entities.Role", "Role")
                    .WithMany("UserRoles")
                    .HasForeignKey("RId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("SolarApp.Entities.User", "User")
                    .WithMany("UserRoles")
                    .HasForeignKey("UId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });
#pragma warning restore 612, 618
        }
    }
}
